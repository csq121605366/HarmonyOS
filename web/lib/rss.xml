<?xml version="1.0" encoding="UTF-8"?><rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[book]]></title><description><![CDATA[Obsidian digital garden]]></description><link>http://github.com/dylang/node-rss</link><image><url>lib\media\favicon.png</url><title>book</title><link></link></image><generator>Webpage HTML Export plugin for Obsidian</generator><lastBuildDate>Mon, 05 May 2025 15:51:10 GMT</lastBuildDate><atom:link href="lib\rss.xml" rel="self" type="application/rss+xml"/><pubDate>Mon, 05 May 2025 15:50:54 GMT</pubDate><ttl>60</ttl><dc:creator></dc:creator><item><title><![CDATA[布局概述]]></title><description><![CDATA[ 
 布局概述       组件按照布局的要求依次排列，构成应用的页面。在声明式UI中，所有的页面都是由自定义组件构成，开发者可以根据自己的需求，选择合适的布局进行页面开发。    布局指用特定的组件……欲了解更多信息欢迎访问华为HarmonyOS开发者官网]]></description><link>harmonyos\布局\布局概述.html</link><guid isPermaLink="false">harmonyOS/布局/布局概述.md</guid><pubDate>Mon, 28 Apr 2025 14:30:42 GMT</pubDate><enclosure url="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163838.43835122028715656556294649053945:50001231000000:2800:D8F1327EF0C8B5E28994059CE404322B30722A2E097C66D328EA458055221787.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163838.43835122028715656556294649053945:50001231000000:2800:D8F1327EF0C8B5E28994059CE404322B30722A2E097C66D328EA458055221787.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[层叠布局]]></title><description><![CDATA[ 
 层叠布局 (Stack)                 概述     层叠布局（StackLayout）用于在屏幕上预留一块区域来显示组件中的元素，提供元素可以重叠的布局。层叠布局通过Stac……欲了解更多信息欢迎访问华为HarmonyOS开发者官网]]></description><link>harmonyos\布局\层叠布局.html</link><guid isPermaLink="false">harmonyOS/布局/层叠布局.md</guid><pubDate>Sun, 27 Apr 2025 14:57:19 GMT</pubDate><enclosure url="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163840.17197511546609011459261801204948:50001231000000:2800:14A44EAD6F106B555BF891BD0CBB7EB900BE4E7503F02C751577C37C869BE40F.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163840.17197511546609011459261801204948:50001231000000:2800:14A44EAD6F106B555BF891BD0CBB7EB900BE4E7503F02C751577C37C869BE40F.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[创建列表 (List)-构建布局-开发布局-UI开发 (ArkTS声明式开发范式)-ArkUI（方舟UI框架）-应用框架]]></title><description><![CDATA[ 
 创建列表 (List)                 概述     列表是一种复杂的容器，当列表项达到一定数量，内容超过屏幕大小时，可以自动提供滚动功能。它适合用于呈现同类数据类型或数据类型集……欲了解更多信息欢迎访问华为HarmonyOS开发者官网]]></description><link>harmonyos\布局\列表.html</link><guid isPermaLink="false">harmonyOS/布局/列表.md</guid><pubDate>Mon, 28 Apr 2025 15:56:37 GMT</pubDate><enclosure url="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250428175937.64185603123160245048354299152758:50001231000000:2800:3011D47336F74FF5AB0D90C06BC5D54D189898CEA3569134CA879B19B22404A9.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250428175937.64185603123160245048354299152758:50001231000000:2800:3011D47336F74FF5AB0D90C06BC5D54D189898CEA3569134CA879B19B22404A9.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[弹性布局 (Flex)-构建布局-开发布局-UI开发 (ArkTS声明式开发范式)-ArkUI（方舟UI框架）-应用框架]]></title><description><![CDATA[ 
 弹性布局 (Flex)                 概述     弹性布局（Flex）提供更加有效的方式对容器中的子元素进行排列、对齐和分配剩余空间。常用于页面头部导航栏的均匀分布、页面框架……欲了解更多信息欢迎访问华为HarmonyOS开发者官网]]></description><link>harmonyos\布局\弹性布局.html</link><guid isPermaLink="false">harmonyOS/布局/弹性布局.md</guid><pubDate>Sun, 27 Apr 2025 15:23:04 GMT</pubDate><enclosure url="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163841.23306797182734616010851125989111:50001231000000:2800:A735C02DF27248DD7F6831FBEA5667D1FF50A4A9805128DCC13D76C88657D729.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163841.23306797182734616010851125989111:50001231000000:2800:A735C02DF27248DD7F6831FBEA5667D1FF50A4A9805128DCC13D76C88657D729.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[线性布局]]></title><description><![CDATA[ 
 线性布局 (Row/Column)                 概述     线性布局（LinearLayout）是开发中最常用的布局，通过线性容器Row和Column构建。线性布局是其他布……欲了解更多信息欢迎访问华为HarmonyOS开发者官网]]></description><link>harmonyos\布局\线性布局.html</link><guid isPermaLink="false">harmonyOS/布局/线性布局.md</guid><pubDate>Sun, 27 Apr 2025 14:41:50 GMT</pubDate><enclosure url="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163838.89999381839122363724497242356524:50001231000000:2800:391C2D4C3FA524AA0C54BBFB43DE345AD8EE6F13F975446DC4AA33A393B69CB6.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163838.89999381839122363724497242356524:50001231000000:2800:391C2D4C3FA524AA0C54BBFB43DE345AD8EE6F13F975446DC4AA33A393B69CB6.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[相对布局 (RelativeContainer)-构建布局-开发布局-UI开发 (ArkTS声明式开发范式)-ArkUI（方舟UI框架）-应用框架]]></title><description><![CDATA[ 
 相对布局 (RelativeContainer)                 概述     在应用的开发过程中，经常需要设计复杂界面，此时涉及到多个相同或不同组件之间的嵌套。如果布局组件嵌套……欲了解更多信息欢迎访问华为HarmonyOS开发者官网]]></description><link>harmonyos\布局\相对布局.html</link><guid isPermaLink="false">harmonyOS/布局/相对布局.md</guid><pubDate>Sun, 27 Apr 2025 15:36:09 GMT</pubDate><enclosure url="https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163843.93300395628947510234473892357762:50001231000000:2800:B619691DDF9EC3BF576E747EEFB945168676638A242B8DFA97A9C0DCA501AFD5.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://alliance-communityfile-drcn.dbankcdn.com/FileServer/getFile/cmtyPub/011/111/111/0000000000011111111.20250427163843.93300395628947510234473892357762:50001231000000:2800:B619691DDF9EC3BF576E747EEFB945168676638A242B8DFA97A9C0DCA501AFD5.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[4.1 Stage模型]]></title><description><![CDATA[ 
 ]]></description><link>harmonyos\基础篇\第4章-arkui框架入门\4.1-stage模型.html</link><guid isPermaLink="false">harmonyOS/基础篇/第4章 ArkUI框架入门/4.1 Stage模型.md</guid><pubDate>Sun, 04 May 2025 14:21:06 GMT</pubDate></item><item><title><![CDATA[4.2 资源管理]]></title><description><![CDATA[ 
 ]]></description><link>harmonyos\基础篇\第4章-arkui框架入门\4.2-资源管理.html</link><guid isPermaLink="false">harmonyOS/基础篇/第4章 ArkUI框架入门/4.2 资源管理.md</guid><pubDate>Sun, 04 May 2025 14:21:06 GMT</pubDate></item><item><title><![CDATA[6.1 文本组件]]></title><description><![CDATA[ 
 <br><br><br>鸿蒙框架中的文本组件主要用于接收用户输入的信息、呈现的文本内容以及小图标，与其他组件一起共同构建了用户与系统间的交互界面，提升了操作的便捷性与信息展示的直观性。文本组件支持多种属性设置，包括字体大小、颜色和对齐方式等等。<br><br>主要用于显示静态文本。可以使用Text组件配合Span组件创建文本节点，也可以使用属性字符串。  <br><br><br>文本组件，通常用于展示用户视图，如显示文章的文字内容，支持绑定自定义文本选择菜单，用户可根据需要选择不同功能，同时还可以扩展自定义菜单，丰富可用选项，进一步提升用户体验。<br>Text(content?: string | Resource , value?: TextOptions)
<br>
<br>
string字符串。
// string字符串
Text('我是一段文本')

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505204532824.png" referrerpolicy="no-referrer">

<br>
引用Resource资源。<br>
资源引用类型可以通过$r创建Resource类型对象，文件位置为/resources/base/element/string.json，具体内容如下：
  {
  "string": [
	{
	  "name": "module_desc",
	  "value": "模块描述"
	}
  ]
}

// 引用Resource资源
Text($r('app.string.module_desc'))
  .baselineOffset(0)
  .fontSize(30)
  .border({ width: 1 })
  .padding(10)
  .width(300)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505204543603.png" referrerpolicy="no-referrer">

<br><br>只能作为Text和RichEditor组件的子组件显示文本内容。可以在一个Text内添加多个Span来显示一段信息，例如产品说明书、承诺书等。<br>Text('我是Text') {
  Span('我是Span1').fontColor(Color.Red)
  Span('我是Span2').fontColor(Color.Blue)
}
.padding(10)
.borderWidth(1)
<br><br>
<br>文本组件可以添加通用事件，可以绑定onClick、onTouch等事件来响应操作。
Text('点我')
  .onClick(() =&gt; {
	  console.info('我是Text的点击响应事件');
   })


<br><br>
<br>通过<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#textalign" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#textalign" target="_blank">textAlign</a>属性设置文本对齐样式。
Text('左对齐')
  .width(300)
  .textAlign(TextAlign.Start)
  .border({ width: 1 })
  .padding(10)
Text('中间对齐')
  .width(300)
  .textAlign(TextAlign.Center)
  .border({ width: 1 })
  .padding(10)
Text('右对齐')
  .width(300)
  .textAlign(TextAlign.End)
  .border({ width: 1 })
  .padding(10)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505195038215.png" referrerpolicy="no-referrer">
<br>通过<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#textoverflow" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#textoverflow" target="_blank">textOverflow</a>属性控制文本超长处理，textOverflow需配合<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#maxlines" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#maxlines" target="_blank">maxLines</a>一起使用（默认情况下文本自动折行）。
Text('This is the setting of textOverflow to Clip text content This is the setting of textOverflow to None text content. This is the setting of textOverflow to Clip text content This is the setting of textOverflow to None text content.')
  .width(250)
  .textOverflow({ overflow: TextOverflow.None })
  .maxLines(1)
  .fontSize(12)
  .border({ width: 1 })
  .padding(10)
Text('我是超长文本，超出的部分显示省略号。I am an extra long text, with ellipses displayed for any excess。')
  .width(250)
  .textOverflow({ overflow: TextOverflow.Ellipsis })
  .maxLines(1)
  .fontSize(12)
  .border({ width: 1 })
  .padding(10)
Text('当文本溢出其尺寸时，文本将滚动显示。When the text overflows its dimensions, the text will scroll for displaying.')       
  .width(250)
  .textOverflow({ overflow: TextOverflow.MARQUEE })                 
  .maxLines(1)       
  .fontSize(12)
  .border({ width: 1 })
  .padding(10)                       

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505203941307.png" referrerpolicy="no-referrer">
<br>通过<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#lineheight" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#lineheight" target="_blank">lineHeight</a>属性设置文本行高。
Text('This is the text with the line height set. This is the text with the line height set.')
  .width(300).fontSize(12).border({ width: 1 }).padding(10)
Text('This is the text with the line height set. This is the text with the line height set.')
  .width(300).fontSize(12).border({ width: 1 }).padding(10)
  .lineHeight(20)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505202237084.png" referrerpolicy="no-referrer">
<br>通过<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#decoration" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#decoration" target="_blank">decoration</a>属性设置文本装饰线样式及其颜色。
Text('This is the text')
  .decoration({
	type: TextDecorationType.LineThrough,
	color: Color.Red
  })
  .borderWidth(1).padding(10).margin(5)
Text('This is the text')
  .decoration({
	type: TextDecorationType.Overline,
	color: Color.Red
  })
  .borderWidth(1).padding(10).margin(5)
Text('This is the text')
  .decoration({
	type: TextDecorationType.Underline,
	color: Color.Red
  })
  .borderWidth(1).padding(10).margin(5)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505202319811.png" referrerpolicy="no-referrer">
<br>通过<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#letterspacing" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#letterspacing" target="_blank">letterSpacing</a>属性设置文本字符间距。
Text('This is the text content with letterSpacing 0.')
  .letterSpacing(0)
  .fontSize(12)
  .border({ width: 1 })
  .padding(10)
  .width('100%')
  .margin(5)
Text('This is the text content with letterSpacing 3.')
  .letterSpacing(3)
  .fontSize(12)
  .border({ width: 1 })
  .padding(10)
  .width('100%')
  .margin(5)
Text('This is the text content with letterSpacing -1.')
  .letterSpacing(-1)
  .fontSize(12)
  .border({ width: 1 })
  .padding(10)
  .width('100%')
  .margin(5)	  

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505202422095.png" referrerpolicy="no-referrer">
<br>通过<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#textcase" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#textcase" target="_blank">textCase</a>属性设置文本大小写。
Text('This is the text content with textCase set to Normal.')
  .textCase(TextCase.Normal)
  .padding(10)
  .border({ width: 1 })
  .padding(10)
  .margin(5)
// 文本全小写展示
Text('This is the text content with textCase set to LowerCase.')
  .textCase(TextCase.LowerCase)
  .border({ width: 1 })
  .padding(10)
  .margin(5)
// 文本全大写展示
Text('This is the text content with textCase set to UpperCase.')
  .textCase(TextCase.UpperCase)
  .border({ width: 1 })
  .padding(10)
  .margin(5)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505202517408.png" referrerpolicy="no-referrer">
<br>通过<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#copyoption9" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-text#copyoption9" target="_blank">copyOption</a>属性设置文本是否可复制粘贴。
Text("这是一段可复制文本")
  .fontSize(30)
  .copyOption(CopyOptions.InApp)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505202542430.png" referrerpolicy="no-referrer">
<br><br>主要用于单行文本或多行文本的输入。<br><br><br>TextInput(value?:{placeholder?: ResourceStr, text?: ResourceStr, controller?: TextInputController})
<br><img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505203401402.png" referrerpolicy="no-referrer"><br><br>多行输入框文字超出一行时会自动折行。<br>TextArea(value?:{placeholder?: ResourceStr, text?: ResourceStr, controller?: TextAreaController})
<br><img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505203408797.png" referrerpolicy="no-referrer"><br><br>TextInput有以下类型可选择：Normal基本输入模式、Password密码输入模式、Email邮箱地址输入模式、Number纯数字输入模式、PhoneNumber电话号码输入模式、USER_NAME用户名输入模式、NEW_PASSWORD新密码输入模式、NUMBER_PASSWORD纯数字密码输入模式、NUMBER_DECIMAL带小数点的数字输入模式、带URL的输入模式。通过type属性进行设置：<br>// 基本输入模式（默认类型）
TextInput()
  .type(InputType.Normal)

// 密码输入模式
TextInput()
  .type(InputType.Password)
  
// 邮箱地址输入模式
TextInput()
  .type(InputType.Email)

// 纯数字输入模式
TextInput()
  .type(InputType.Number)

// 电话号码输入模式
TextInput()
  .type(InputType.PhoneNumber)

// 带小数点的数字输入模式
TextInput()
  .type(InputType.NUMBER_DECIMAL)

// 带URL的输入模式
TextInput()
  .type(InputType.URL)
<br><br>文本框主要用于获取用户输入的信息，把信息处理成数据进行上传，绑定onChange事件可以获取输入框内改变的文本内容，绑定onSubmit事件可以获取回车提交的文本信息，绑定onFocus事件，输入框获焦时触发该回调等等。<br>TextInput({ text: this.text, placeholder: 'input your word...'})
  .type(InputType.Password)
  .showPassword(this.passwordState)
  .onChange((value: string) =&gt; {
    // 文本内容发生变化时触发该回调
    console.info('onChange is triggering: ', value);
  })
  .onSubmit((enterKey: EnterKeyType, event: SubmitEvent) =&gt; {
    // 按下输入法回车键时触发该回调
    console.info('onSubmit is triggering: ', enterKey, event.text);
  })
  .onFocus(() =&gt; {
    //绑定通用事件，输入框获焦时触发该回调
    console.info('onFocus is triggering')
  })
<br>]]></description><link>harmonyos\进阶篇\第6章-基础组件\6.1-文本组件.html</link><guid isPermaLink="false">harmonyOS/进阶篇/第6章 基础组件/6.1 文本组件.md</guid><pubDate>Mon, 05 May 2025 13:54:27 GMT</pubDate><enclosure url="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505204532824.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505204532824.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6.2 按钮组件]]></title><description><![CDATA[ 
 <br><br><br>Button是按钮组件，通常用于响应用户的点击操作，其类型包括胶囊按钮、圆形按钮、普通按钮、圆角矩形按钮。Button做为容器使用时可以通过添加子组件实现包含文字、图片等元素的按钮。<br><br>Button通过调用接口来创建，接口调用有以下两种形式：<br>
<br>
通过label和<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-button#buttonoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-button#buttonoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E" target="_blank">ButtonOptions</a>创建不包含子组件的按钮。以ButtonOptions中的type和stateEffect为例。
Button(
	label?: ResourceStr, 
	options?: { type?: ButtonType, stateEffect?: boolean })

其中，label用来设置按钮文字，type用于设置Button类型，stateEffect属性设置Button是否开启点击效果。
Button('Ok', { type: ButtonType.Normal, stateEffect: true }) 
  .borderRadius(8) 
  .backgroundColor(0x317aff) 
  .width(90)
  .height(40)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212050235.png" referrerpolicy="no-referrer">

<br>
通过<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-button#buttonoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-button#buttonoptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E" target="_blank">ButtonOptions</a>创建包含子组件的按钮。以ButtonOptions中的type和stateEffect为例。
Button(options?: {type?: ButtonType, stateEffect?: boolean})

只支持包含一个子组件，子组件可以是基础组件或者容器组件。
Button({ type: ButtonType.Normal, stateEffect: true }) {
	Row() {
	    Image($r('app.media.loading')).width(20).height(40).margin({ left: 12 })
	    Text('loading').fontSize(12).fontColor(0xffffff).margin({ left: 5, right: 12 })
	  }.alignItems(VerticalAlign.Center)
}.borderRadius(8).backgroundColor(0x317aff).width(90).height(40)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212156016.png" referrerpolicy="no-referrer">

<br><br>Button有四种可选类型，分别为胶囊类型（Capsule）、圆形按钮（Circle）、普通按钮（Normal）和圆角矩形按钮（ROUNDED_RECTANGLE），通过type进行设置。<br>
<br>
胶囊按钮（默认类型）<br>
此类型按钮的圆角自动设置为高度的一半，不支持通过borderRadius属性重新设置圆角。
  Button('Disable', { type: ButtonType.Capsule, stateEffect: false }) 
  .backgroundColor(0x317aff) 
  .width(90)
  .height(40)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212340052.png" referrerpolicy="no-referrer">

<br>
圆形按钮<br>
此类型按钮为圆形，不支持通过borderRadius属性重新设置圆角。
  Button('Circle', { type: ButtonType.Circle, stateEffect: false }) 
  .backgroundColor(0x317aff) 
  .width(90) 
  .height(90)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212423584.png" referrerpolicy="no-referrer">

<br>
普通按钮<br>
此类型的按钮默认圆角为0，支持通过borderRadius属性重新设置圆角。
  Button('Ok', { type: ButtonType.Normal, stateEffect: true }) 
  .borderRadius(8) 
  .backgroundColor(0x317aff) 
  .width(90)
  .height(40)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212530784.png" referrerpolicy="no-referrer">

<br>
圆角矩形按钮<br>
当<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-button#controlsize11" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-button#controlsize11" target="_blank">controlSize</a>为NORMAL时，默认圆角大小为20vp，<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-button#controlsize11" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-button#controlsize11" target="_blank">controlSize</a>为SMALL时，圆角大小为14vp，支持通过borderRadius属性重新设置圆角。
  Button('Disable', { type: ButtonType.ROUNDED_RECTANGLE, stateEffect: true }) 
  .backgroundColor(0x317aff) 
  .width(90)
  .height(40)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212559326.png" referrerpolicy="no-referrer">

<br><br>
<br>
设置边框弧度<br>
使用通用属性来自定义按钮样式。例如通过borderRadius属性设置按钮的边框弧度。
  Button('circle border', { type: ButtonType.Normal }) 
  .borderRadius(20)
  .height(40)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212743513.png" referrerpolicy="no-referrer">

<br>
设置文本样式<br>
通过添加文本样式设置按钮文本的展示样式。
  Button('font style', { type: ButtonType.Normal }) 
  .fontSize(20) 
  .fontColor(Color.Pink) 
  .fontWeight(800)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212810471.png" referrerpolicy="no-referrer">

<br>
设置背景颜色<br>
添加backgroundColor属性设置按钮的背景颜色。
  Button('background color').backgroundColor(0xF55A42)

<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212838882.png" referrerpolicy="no-referrer">

<br>
创建功能型按钮<br>
为删除操作创建一个按钮。<br>
ts 	Button({ type: ButtonType.Circle, stateEffect: true }) { 	  Image($r('app.media.ic_public_delete_filled')).width(30).height(30) 	}.width(55).height(55).margin({ 'left': 20 }).backgroundColor(0xF55A42) 	<br>
<img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212923153.png" referrerpolicy="no-referrer"><br>
素材：<img alt="ic_public_delete_filled.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505213209801.png" referrerpolicy="no-referrer">

<br><br>Button组件通常用于触发某些操作，可以绑定onClick事件来响应点击操作后的自定义行为。<br>Button('Ok', { type: ButtonType.Normal, stateEffect: true }) 
  .onClick(()=&gt;{ 
    console.info('Button onClick') 
  })
<br>]]></description><link>harmonyos\进阶篇\第6章-基础组件\6.2-按钮组件.html</link><guid isPermaLink="false">harmonyOS/进阶篇/第6章 基础组件/6.2 按钮组件.md</guid><pubDate>Mon, 05 May 2025 13:52:26 GMT</pubDate><enclosure url="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212050235.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505212050235.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6.3 单选框组件]]></title><description><![CDATA[ 
 <br><br><br>Radio是单选框组件，通常用于提供相应的用户交互选择项，同一组的Radio中只有一个可以被选中。<br><br>Radio通过调用<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-radio#radiooptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-basic-components-radio#radiooptions%E5%AF%B9%E8%B1%A1%E8%AF%B4%E6%98%8E" target="_blank">RadioOptions</a>来创建，以RadioOptions中的value和group为例：<br>Radio(options: {value: string, group: string})
<br>其中，value是单选框的名称，group是单选框的所属群组名称。checked属性可以设置单选框的状态，状态分别为false和true，设置为true时表示单选框被选中。<br>
Radio支持设置选中状态和非选中状态的样式。<br>Radio({ value: 'Radio1', group: 'radioGroup' })
  .checked(false)
Radio({ value: 'Radio2', group: 'radioGroup' })
  .checked(true)
<br><img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505214920701.png" referrerpolicy="no-referrer"><br><br>除支持<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-component-general-events" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-component-general-events" target="_blank">通用事件</a>外，Radio还用于选中后触发某些操作，可以绑定onChange事件来响应选中操作后的自定义行为。<br>  Radio({ value: 'Radio1', group: 'radioGroup' })
    .onChange((isChecked: boolean) =&gt; {
      if(isChecked) {
        //需要执行的操作
      }
    })
  Radio({ value: 'Radio2', group: 'radioGroup' })
    .onChange((isChecked: boolean) =&gt; {
      if(isChecked) {
        //需要执行的操作
      }
    })
<br>]]></description><link>harmonyos\进阶篇\第6章-基础组件\6.3-单选框组件.html</link><guid isPermaLink="false">harmonyOS/进阶篇/第6章 基础组件/6.3 单选框组件.md</guid><pubDate>Mon, 05 May 2025 13:52:37 GMT</pubDate><enclosure url="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505214920701.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505214920701.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[6.4 切换按钮组件]]></title><description><![CDATA[ 
 <br><br><br>Toggle组件提供状态按钮样式、勾选框样式和开关样式，一般用于两种状态之间的切换。<br><br>Toggle通过调用接口来创建，接口调用形式如下：<br>Toggle(options: { type: ToggleType, isOn?: boolean })
<br>其中，ToggleType为开关类型，包括Button、Checkbox和Switch，isOn为切换按钮的状态。<br>API version 11开始，Checkbox默认样式由圆角方形变为圆形。<br>接口调用有以下两种形式：<br>
<br>创建不包含子组件的Toggle<br>
当ToggleType为Checkbox或者Switch时，用于创建不包含子组件的Toggle：
<br>Toggle({ type: ToggleType.Checkbox, isOn: false })
Toggle({ type: ToggleType.Checkbox, isOn: true })
<br><img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505220649263.png" referrerpolicy="no-referrer"><br>Toggle({ type: ToggleType.Switch, isOn: false })
Toggle({ type: ToggleType.Switch, isOn: true })
<br><img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505220719923.png" referrerpolicy="no-referrer"><br>
<br>创建包含子组件的Toggle<br>
当ToggleType为Button时，只能包含一个子组件，如果子组件有文本设置，则相应的文本内容会显示在按钮上。
<br>  Toggle({ type: ToggleType.Button, isOn: false }) {
  Text('status button')
    .fontColor('#182431')
    .fontSize(12)
}.width(100)
Toggle({ type: ToggleType.Button, isOn: true }) {
  Text('status button')
    .fontColor('#182431')
    .fontSize(12)
}.width(100)
<br><img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505220739753.png" referrerpolicy="no-referrer"><br><br>
<br>通过selectedColor属性设置Toggle打开选中后的背景颜色。
<br>  Toggle({ type: ToggleType.Button, isOn: true }) {
  Text('status button')
  .fontColor('#182431')
  .fontSize(12)
}.width(100).selectedColor(Color.Pink)
Toggle({ type: ToggleType.Checkbox, isOn: true })
  .selectedColor(Color.Pink)
Toggle({ type: ToggleType.Switch, isOn: true })
  .selectedColor(Color.Pink)
<br><img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505220827870.png" referrerpolicy="no-referrer"><br>
<br>通过switchPointColor属性设置Switch类型的圆形滑块颜色，仅对type为ToggleType.Switch生效。
<br>Toggle({ type: ToggleType.Switch, isOn: false })
  .switchPointColor(Color.Pink)
Toggle({ type: ToggleType.Switch, isOn: true })
  .switchPointColor(Color.Pink)
<br><img alt="image.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505220850732.png" referrerpolicy="no-referrer"><br><br>除支持<a data-tooltip-position="top" aria-label="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-component-general-events" rel="noopener nofollow" class="external-link" href="https://developer.huawei.com/consumer/cn/doc/harmonyos-references/ts-component-general-events" target="_blank">通用事件</a>外，Toggle还用于选中和取消选中后触发某些操作，可以绑定onChange事件来响应操作后的自定义行为。<br>Toggle({ type: ToggleType.Switch, isOn: false })
  .onChange((isOn: boolean) =&gt; {
      if(isOn) {
        // 需要执行的操作
      }
  })
<br>]]></description><link>harmonyos\进阶篇\第6章-基础组件\6.4-切换按钮组件.html</link><guid isPermaLink="false">harmonyOS/进阶篇/第6章 基础组件/6.4 切换按钮组件.md</guid><pubDate>Mon, 05 May 2025 14:52:04 GMT</pubDate><enclosure url="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505220649263.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505220649263.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[基础篇]]></title><description><![CDATA[ 
 <br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br><br>]]></description><link>harmonyos\鸿蒙应用开发实训教程.html</link><guid isPermaLink="false">harmonyOS/鸿蒙应用开发实训教程.md</guid><pubDate>Mon, 05 May 2025 14:05:10 GMT</pubDate></item><item><title><![CDATA[<a data-href="鸿蒙应用开发实训教程" href="harmonyos/鸿蒙应用开发实训教程.html" class="internal-link" target="_self" rel="noopener nofollow">鸿蒙应用开发实训教程</a>]]></title><description><![CDATA[ 
 <br><img alt="Pasted image 20250505091733.png" src="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505093215916.png" referrerpolicy="no-referrer"><br>]]></description><link>index.html</link><guid isPermaLink="false">Index.md</guid><pubDate>Mon, 05 May 2025 14:46:13 GMT</pubDate><enclosure url="https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505093215916.png" length="0" type="image/png"/><content:encoded>&lt;figure&gt;&lt;img src=&quot;https://harmonyos-1256472033.cos.ap-shanghai.myqcloud.com/20250505093215916.png&quot;&gt;&lt;/figure&gt;</content:encoded></item><item><title><![CDATA[鸿蒙应用开发实训教程]]></title><description><![CDATA[ 
 <br><br>《鸿蒙应用开发实训教程》是一本针对高职院校学生编写的数字教材，旨在帮助学生快速掌握鸿蒙（HarmonyOS）应用开发的核心技能。本书以实战为导向，结合丰富的案例和项目，系统介绍鸿蒙操作系统的基础知识、开发工具使用、界面设计、功能实现及多设备协同开发等内容。<br>教材特点：<br>
<br>项目驱动式学习：采用“任务导向+案例实战”的方式，让学生在完成具体项目的过程中掌握开发技巧，提升实战能力。
<br>渐进式知识体系：从基础到高级，循序渐进地讲解鸿蒙应用开发的各个关键环节，包括UI设计、事件处理、数据管理等。
<br>真实实训案例：通过开发完整的实训项目（如“生活笔记”元服务、知识卡片、千鹤音乐等），帮助学生在实际操作中巩固知识，提高动手能力。
<br>配套资源丰富：提供完整的源代码、开发工具使用指南及教学课件，方便学生和教师使用。
<br>适用读者：<br>
<br>高职院校计算机相关专业学生
<br>鸿蒙应用开发初学者
<br>希望掌握跨设备应用开发技术的开发者
<br>本书目标是通过系统化的实训内容，培养学生在鸿蒙生态下的应用开发能力，助力其适应未来智能终端发展的技术需求。]]></description><link>readme.html</link><guid isPermaLink="false">README.md</guid><pubDate>Thu, 01 May 2025 10:08:29 GMT</pubDate></item></channel></rss>